{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/nft/metadata.ts","../src/nft/internal.ts","../src/nft/mint.ts","../src/nft/nft_core.ts","../src/nft/enumeration.ts","../src/nft/approval.ts","../src/nft/index.ts"],"sourcesContent":["export var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from '@scure/base';\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nfunction data_len(c) {\n    switch (c) {\n        case CurveType.ED25519:\n            return 32;\n        case CurveType.SECP256K1:\n            return 64;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction split_key_type_data(value) {\n    let idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [curveTypeFromStr(value.substring(0, idx)), value.substring(idx + 1)];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length) {\n        super(`Invalid length: ${length}`);\n        this.length = length;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\nexport class PublicKey {\n    constructor(data) {\n        this.data = data;\n        let curve_type = data.charCodeAt(0);\n        let curve_len = data_len(curve_type);\n        if (data.length != curve_len + 1) {\n            throw new InvalidLengthError(data.length);\n        }\n        this.data = data;\n    }\n    curveType() {\n        return this.data.charCodeAt(0);\n    }\n    static fromString(s) {\n        let [curve, key_data] = split_key_type_data(s);\n        let data;\n        try {\n            data = bytes(base58.decode(key_data));\n        }\n        catch (err) {\n            throw new Base58Error(err.message);\n        }\n        return new PublicKey(String.fromCharCode(curve) + data);\n    }\n}\n","import { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else {\n        throw Error(`Promise result ${status == PromiseResult.Failed ? \"Failed\" :\n            status == PromiseResult.NotReady ? \"NotReady\" : status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport function initialize({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function call({ privateFunction = false, payableFunction = false }) {\n    return function (target, key, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            if (privateFunction && near.predecessorAccountId() !== near.currentAccountId()) {\n                throw Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > BigInt(0)) {\n                throw Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function view({}) {\n    return function (target, key, descriptor) {\n    };\n}\nexport function NearBindgen({ requireInit = false }) {\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(obj) {\n                near.storageWrite(\"STATE\", this._serialize(obj));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value) {\n                return JSON.stringify(value);\n            }\n            static _deserialize(value) {\n                return JSON.parse(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    if (classObject[item].constructor?.deserialize !== undefined) {\n                        classObject[item] = classObject[item].constructor.deserialize(plainObject[item]);\n                    }\n                    else {\n                        classObject[item] = plainObject[item];\n                    }\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.length) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(prefix + 'u'); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(prefix + 'm');\n    }\n    get length() {\n        let keysLen = this.keys.length;\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        return keysIsEmpty;\n    }\n    get(key) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return null;\n        }\n        let value = valueAndIndex[0];\n        return value;\n    }\n    set(key, value) {\n        let valueAndIndex = this.values.get(key);\n        if (valueAndIndex !== null) {\n            let oldValue = valueAndIndex[0];\n            valueAndIndex[0] = value;\n            this.values.set(key, valueAndIndex);\n            return oldValue;\n        }\n        let nextIndex = this.length;\n        this.keys.push(key);\n        this.values.set(key, [value, nextIndex]);\n        return null;\n    }\n    remove(key) {\n        let oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return null;\n        }\n        let index = oldValueAndIndex[1];\n        if (this.keys.swapRemove(index) === null) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (this.keys.length > 0 && index != this.keys.length) {\n            // if there is still elements and it was not the last element\n            let swappedKey = this.keys.get(index);\n            let swappedValueAndIndex = this.values.get(swappedKey);\n            if (swappedValueAndIndex === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return oldValueAndIndex[0];\n    }\n    clear() {\n        for (let key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"u\");\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(data.prefix + \"m\");\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        let key = this.keys.next();\n        let value;\n        if (!key.done) {\n            value = this.map.get(key.value);\n            if (value === null) {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return { value: [key.value, value ? value[0] : value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction serializeIndex(index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    return u8ArrayToBytes(array);\n}\nfunction deserializeIndex(rawIndex) {\n    let array = bytesToU8Array(rawIndex);\n    let data = new Uint32Array(array.buffer);\n    return data[0];\n}\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    get length() {\n        return this.elements.length;\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.length;\n            let nextIndexRaw = serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.length == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.length - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { Contract } from \".\";\n\n//defines the payout type we'll be returning as a part of the royalty standards.\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor({\n        spec,\n        name,\n        symbol,\n        icon,\n        baseUri,\n        reference,\n        referenceHash,\n    }: {\n        spec: string;\n        name: string;\n        symbol: string;\n        icon?: string;\n        baseUri?: string;\n        reference?: string;\n        referenceHash?: string;\n    }) {\n        this.spec = spec; // required, essentially a version like \"nft-1.0.0\"\n        this.name = name; // required, ex. \"Mosaics\"\n        this.symbol = symbol; // required, ex. \"MOSAIC\"\n        this.icon = icon; // Data URL\n        this.base_uri = baseUri; // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs\n        this.reference = reference; // URL to a JSON file with more info\n        this.reference_hash = referenceHash; // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor({\n        title,\n        description,\n        media,\n        mediaHash,\n        copies,\n        issuedAt,\n        expiresAt,\n        startsAt,\n        updatedAt,\n        extra,\n        reference,\n        referenceHash,\n    }: {\n        title?: string;\n        description?: string;\n        media?: string;\n        mediaHash?: string;\n        copies?: number;\n        issuedAt?: string;\n        expiresAt?: string;\n        startsAt?: string;\n        updatedAt?: string;\n        extra?: string;\n        reference?: string;\n        referenceHash?: string;\n    }) {\n        this.title = title; // ex. \"Arch Nemesis: Mail Carrier\" or \"Parcel #5055\"\n        this.description = description; // free-form description\n        this.media = media; // URL to associated media, preferably to decentralized, content-addressed storage\n        this.media_hash = mediaHash; // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n        this.copies = copies; // number of copies of this set of metadata in existence when token was minted.\n        this.issued_at = issuedAt; // ISO 8601 datetime when token was issued or minted\n        this.expires_at = expiresAt; // ISO 8601 datetime when token expires\n        this.starts_at = startsAt; // ISO 8601 datetime when token starts being valid\n        this.updated_at = updatedAt; // ISO 8601 datetime when token was last updated\n        this.extra = extra; // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n        this.reference = reference; // URL to an off-chain JSON file with more info.\n        this.reference_hash = referenceHash; // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n    }\n}\n\nexport class Token {\n    owner_id: string;\n    approved_account_ids: { [accountId: string]: number };\n    next_approval_id: number;\n    royalty: { [accountId: string]: number };\n\n    constructor({\n        owner_id,\n        approvedAccountIds,\n        nextApprovalId,\n        royalty,\n    }: {\n        owner_id: string;\n        approvedAccountIds: { [accountId: string]: number };\n        nextApprovalId: number;\n        royalty: { [accountId: string]: number };\n    }) {\n        //owner of the token\n        this.owner_id = owner_id;\n        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n        this.approved_account_ids = approvedAccountIds;\n        //the next approval ID to give out.\n        this.next_approval_id = nextApprovalId;\n        //keep track of the royalty percentages for the token in a hash map\n        this.royalty = royalty;\n    }\n}\n\n//The Json token is what will be returned from view calls.\nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n    approved_account_ids: { [accountId: string]: number };\n    royalty: { [accountId: string]: number };\n\n    constructor({\n        tokenId,\n        ownerId,\n        metadata,\n        approvedAccountIds,\n        royalty,\n    }: {\n        tokenId: string;\n        ownerId: string;\n        metadata: TokenMetadata;\n        approvedAccountIds: { [accountId: string]: number };\n        royalty: { [accountId: string]: number };\n    }) {\n        //token ID\n        (this.token_id = tokenId),\n            //owner of the token\n            (this.owner_id = ownerId),\n            //token metadata\n            (this.metadata = metadata),\n            //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID\n            (this.approved_account_ids = approvedAccountIds),\n            //keep track of the royalty percentages for the token in a hash map\n            (this.royalty = royalty);\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract,\n}: {\n    contract: Contract;\n}): NFTContractMetadata {\n    return contract.metadata;\n}\n","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { panicUtf8 } from \"near-sdk-js/lib/api\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { Token } from \"./metadata\";\n\n// Gets a collection and deserializes it into a set that can be used.\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//convert the royalty percentage and amount to pay into a payout (U128)\nexport function royaltyToPayout(\n    royaltyPercentage: number,\n    amountToPay: bigint\n): string {\n    return (\n        (BigInt(royaltyPercentage) * BigInt(amountToPay)) /\n        BigInt(10000)\n    ).toString();\n}\n\n//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID.\nexport function refundApprovedAccountIdsIter(\n    accountId: string,\n    approvedAccountIds: string[]\n) {\n    //get the storage total by going through and summing all the bytes for each approved account IDs\n    let storageReleased = approvedAccountIds\n        .map((e) => bytesForApprovedAccountId(e))\n        .reduce((partialSum, a) => partialSum + a, 0);\n    let amountToTransfer =\n        BigInt(storageReleased) * near.storageByteCost().valueOf();\n\n    // Send the money to the beneficiary (TODO: don't use batch actions)\n    const promise = near.promiseBatchCreate(accountId);\n    near.promiseBatchActionTransfer(promise, amountToTransfer);\n}\n\n//refund a map of approved account IDs and send the funds to the passed in account ID\nexport function refundApprovedAccountIds(\n    accountId: string,\n    approvedAccountIds: { [key: string]: number }\n) {\n    //call the refundApprovedAccountIdsIter with the approved account IDs as keys\n    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));\n}\n\n//refund the initial deposit based on the amount of storage that was used up\nexport function refundDeposit(storageUsed: bigint) {\n    //get how much it would cost to store the information\n    let requiredCost = storageUsed * near.storageByteCost().valueOf();\n    //get the attached deposit\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    //make sure that the attached deposit is greater than or equal to the required cost\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    );\n\n    //get the refund amount from the attached deposit - required cost\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount\n    if (refund > 1) {\n        // Send the money to the beneficiary (TODO: don't use batch actions)\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund);\n    }\n}\n\n//calculate how many bytes the account ID is taking up\nexport function bytesForApprovedAccountId(accountId: string): number {\n    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.\n    return accountId.length + 4 + 8;\n}\n\n//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)\nexport function assertAtLeastOneYocto() {\n    assert(\n        near.attachedDeposit().valueOf() >= BigInt(1),\n        \"Requires attached deposit of at least 1 yoctoNEAR\"\n    );\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(\n        near.attachedDeposit().toString() === \"1\",\n        \"Requires attached deposit of exactly 1 yoctoNEAR\"\n    );\n}\n\n//add a token to the set of tokens an owner has\nexport function internalAddTokenToOwner(\n    contract: Contract,\n    accountId: string,\n    tokenId: string\n) {\n    //get the set of tokens for the given account\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if (tokenSet == null) {\n        //if the account doesn't have any tokens, we create a new unordered set\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    //we insert the token ID into the set\n    tokenSet.set(tokenId);\n\n    //we insert that set for the given account ID.\n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\n//remove a token from an owner (internal method and can't be called directly via CLI).\nexport function internalRemoveTokenFromOwner(\n    contract: Contract,\n    accountId: string,\n    tokenId: string\n) {\n    //we get the set of tokens that the owner has\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    //if there is no set of tokens for the owner, we panic with the following message:\n    if (tokenSet == null) {\n        panicUtf8(\"Token should be owned by the sender\");\n    }\n\n    //we remove the the token_id from the set of tokens\n    tokenSet.remove(tokenId);\n\n    //if the token set is now empty, we remove the owner from the tokens_per_owner collection\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n    } else {\n        //if the token set is not empty, we simply insert it back for the account ID.\n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}\n\n//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).\nexport function internalTransfer(\n    contract: Contract,\n    senderId: string,\n    receiverId: string,\n    tokenId: string,\n    approvalId: number,\n    memo: string\n): Token {\n    //get the token object by passing in the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        panicUtf8(\"no token found\");\n    }\n\n    //if the sender doesn't equal the owner, we check if the sender is in the approval list\n    if (senderId != token.owner_id) {\n        //if the token's approved account IDs doesn't contain the sender, we panic\n        if (!token.approved_account_ids.hasOwnProperty(senderId)) {\n            panicUtf8(\"Unauthorized\");\n        }\n\n        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included\n        if (approvalId != null) {\n            //get the actual approval ID\n            let actualApprovalId = token.approved_account_ids[senderId];\n            //if the sender isn't in the map, we panic\n            if (actualApprovalId == null) {\n                panicUtf8(\"Sender is not approved account\");\n            }\n\n            //make sure that the actual approval ID is the same as the one provided\n            assert(\n                actualApprovalId == approvalId,\n                `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`\n            );\n        }\n    }\n\n    //we make sure that the sender isn't sending the token to themselves\n    assert(\n        token.owner_id != receiverId,\n        \"The token owner and the receiver should be different\"\n    );\n\n    //we remove the token from it's current owner's set\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    //we then add the token to the receiver_id's set\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    //we create a new token struct\n    let newToken = new Token({\n        owner_id: receiverId,\n        //reset the approval account IDs\n        approvedAccountIds: {},\n        nextApprovalId: token.next_approval_id,\n        //we copy over the royalties from the previous token\n        royalty: token.royalty,\n    });\n\n    //insert that new token into the tokens_by_id, replacing the old entry\n    contract.tokensById.set(tokenId, newToken);\n\n    //if there was some memo attached, we log it.\n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    // Default the authorized ID to be None for the logs.\n    let authorizedId;\n\n    //if the approval ID was provided, set the authorized ID equal to the sender\n    if (approvalId != null) {\n        authorizedId = senderId;\n    }\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: token.owner_id,\n                // The account ID of the new owner of the token.\n                new_owner_id: receiverId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            },\n        ],\n    };\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return the previous token object that was transferred.\n    return token;\n}\n","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiver_id,\n}: {\n    contract: Contract;\n    tokenId: string;\n    metadata: TokenMetadata;\n    receiver_id: string;\n}): void {\n    //measure the initial storage being used on the contract TODO\n    let initialStorageUsage = near.storageUsage();\n\n    // create a royalty map to store in the token\n    // let royalty: { [accountId: string]: number } = {};\n\n    // if perpetual royalties were passed into the function: TODO: add isUndefined fn\n    // if (perpetualRoyalties != null) {\n    //     //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people\n    //     assert(\n    //         Object.keys(perpetualRoyalties).length < 7,\n    //         \"Cannot add more than 6 perpetual royalty amounts\"\n    //     );\n\n    //     //iterate through the perpetual royalties and insert the account and amount in the royalty map\n    //     Object.entries(perpetualRoyalties).forEach(\n    //         ([account, amount], index) => {\n    //             royalty[account] = amount;\n    //         }\n    //     );\n    // }\n\n    //specify the token struct that contains the owner ID\n    let token = new Token({\n        //set the owner ID equal to the receiver ID passed into the function\n        owner_id: receiver_id,\n        //we set the approved account IDs to the default value (an empty map)\n        approvedAccountIds: {},\n        //the next approval ID is set to 0\n        nextApprovalId: 0,\n    });\n\n    //insert the token ID and token struct and make sure that the token doesn't exist\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    contract.tokensById.set(tokenId, token);\n\n    // //insert the token ID and metadata\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    // //call the internal method for adding the token to the owner\n    internalAddTokenToOwner(contract, token.owner_id, tokenId);\n\n    // // Construct the mint log as per the events standard.\n    let nftMintLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_mint\",\n        data: [\n            {\n                // Owner of the token.\n                owner_id: token.owner_id,\n                // Vector of token IDs that were minted.\n                token_ids: [tokenId],\n            },\n        ],\n    };\n\n    // // Log the json.\n    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);\n\n    // //calculate the required storage which was the used - initial TODO\n    let requiredStorageInBytes =\n        near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    // //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.\n    refundDeposit(requiredStorageInBytes);\n    return tokenId;\n}\n","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    //if there wasn't a token ID in the tokens_by_id collection, we return None\n    if (token == null) {\n        return null;\n    }\n\n    //if there is some token ID in the tokens_by_id collection\n    //we'll get the metadata for that token\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    \n    //we return the JsonToken\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n        approvedAccountIds: token.approved_account_ids,\n        royalty: token.royalty\n    });\n    return jsonToken;\n}\n\n//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. \nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    //we refund the owner for releasing the storage used up by the approved account IDs\n    refundApprovedAccountIds(\n        previousToken.owner_id,\n        previousToken.approved_account_ids\n    );\n}\n\n//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    //assert that the user attached exactly 1 yocto for security reasons. \n    assertOneYocto();\n    //get the sender to transfer the token from the sender to the receiver\n    let senderId = near.predecessorAccountId();\n\n    //call the internal transfer method and get back the previous token so we can refund the approved account IDs\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        approvalId,\n        memo,\n    );\n\n    // Initiating receiver's call and the callback\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_on_transfer\", \n        bytes(JSON.stringify({ \n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })), \n        0, // no deposit \n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    // We then resolve the promise and call nft_resolve_transfer on our own contract\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"nft_resolve_transfer\", \n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId,\n            approved_account_ids: previousToken.approved_account_ids\n        })), \n        0, // no deposit \n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\n//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n//returns true if the token was successfully transferred to the receiver_id\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`\n    // call result.\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not\n        //if we need don't need to return the token, we simply return true meaning everything went fine\n        if (result === 'false') {\n            /* \n                since we've already transferred the token and nft_on_transfer returned false, we don't have to \n                revert the original transfer and thus we can just return true since nothing went wrong.\n            */\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            return true;\n        }\n    }\n\n    //get the token object if there is some token object\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            //we refund the owner for releasing the storage used up by the approved account IDs\n            refundApprovedAccountIds(ownerId, approvedAccountIds);\n            // The token is not owner by the receiver anymore. Can't return it.\n            return true;\n        }\n    //if there isn't a token object, it was burned and so we return true\n    } else {\n        //we refund the owner for releasing the storage used up by the approved account IDs\n        refundApprovedAccountIds(ownerId, approvedAccountIds);\n        return true;\n    }\n\n    //we remove the token from the receiver\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    //we add the token to the original owner\n    internalAddTokenToOwner(contract, ownerId, tokenId);\n\n    //we change the token struct's owner to be the original owner \n    token.owner_id = ownerId\n\n    //we refund the receiver any approved account IDs that they may have set on the token\n    refundApprovedAccountIds(receiverId, token.approved_account_ids);\n    //reset the approved account IDs to what they were before the transfer\n    token.approved_account_ids = approvedAccountIds;\n\n    //we inset the token b  ack into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    /*\n        We need to log that the NFT was reverted back to the original owner.\n        The old_owner_id will be the receiver and the new_owner_id will be the\n        original owner of the token since we're reverting the transfer.\n    */\n\n    // Construct the transfer log as per the events standard.\n    let nftTransferLog = {\n        // Standard name (\"nep171\").\n        standard: NFT_STANDARD_NAME,\n        // Version of the standard (\"nft-1.0.0\").\n        version: NFT_METADATA_SPEC,\n        // The data related with the event stored in a vector.\n        event: \"nft_transfer\",\n        data: [\n            {\n                // The optional authorized account ID to transfer the token on behalf of the old owner.\n                authorized_id: authorizedId,\n                // The old owner's account ID.\n                old_owner_id: receiverId,\n                // The account ID of the new owner of the token.\n                new_owner_id: ownerId,\n                // A vector containing the token IDs as strings.\n                token_ids: [tokenId],\n                // An optional memo to include.\n                memo,\n            }\n        ]\n    }\n\n    // Log the serialized json.\n    near.log(JSON.stringify(nftTransferLog));\n\n    //return false\n    return false\n}","// @ts-nocheck\nimport { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract,\n}: {\n    contract: Contract;\n}): number {\n    //return the length of the token metadata by ID\n    return contract.tokenMetadataById.len();\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit,\n}: {\n    contract: Contract;\n    fromIndex?: string;\n    limit?: number;\n}): JsonToken[] {\n    let tokens = [];\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    // Paginate through the keys using the fromIndex and limit\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        // get the token object from the keys\n        let jsonToken = internalNftToken({ contract, tokenId: keys[i][0] });\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    account_id,\n}: {\n    contract: Contract;\n    account_id: string;\n}): number {\n    //get the set of tokens for the passed in owner\n    near.log(`${contract} - ${account_id}`);\n    let tokens = restoreOwners(contract.tokensPerOwner.get(account_id));\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokens == null) {\n        return 0;\n    }\n\n    // //if there is some set of tokens, we'll return the length\n    return tokens.length;\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit,\n}: {\n    contract: Contract;\n    accountId: string;\n    fromIndex?: string;\n    limit?: number;\n}): JsonToken[] {\n    //get the set of tokens for the passed in owner\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    //if there isn't a set of tokens for the passed in account ID, we'll return 0\n    if (tokenSet == null) {\n        return [];\n    }\n\n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = [];\n    for (let i = start; i < max; i++) {\n        if (i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({ contract, tokenId: keys[i] });\n        tokens.push(token);\n    }\n    return tokens;\n}\n","// @ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from \"./internal\";\nimport { Token } from \"./metadata\";\n\nconst GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;\n\n//approve an account ID to transfer a token on your behalf\nexport function internalNftApprove({\n    contract,\n    tokenId,\n    accountId,\n    msg\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string, \n    msg: string \n}) {\n    /*\n        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.\n        The user needs to attach enough to pay for storage on the contract\n    */\n    assertAtLeastOneYocto();\n\n    //get the token object from the token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n    //make sure that the person calling the function is the owner of the token\n    assert(near.predecessorAccountId() === token.owner_id, \"Predecessor must be the token owner\");\n\n    //get the next approval ID if we need a new approval\n    let approvalId = token.next_approval_id;\n\n    //check if the account has been approved already for this token\n    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);\n    token.approved_account_ids[accountId] = approvalId;\n\n    //if it was a new approval, we need to calculate how much storage is being used to add the account.\n    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;\n\n    //increment the token's next approval ID by 1\n    token.next_approval_id += 1;\n    //insert the token back into the tokens_by_id collection\n    contract.tokensById.set(tokenId, token);\n\n    //refund any excess storage attached by the user. If the user didn't attach enough, panic. \n    refundDeposit(BigInt(storageUsed));\n    \n    //if some message was passed into the function, we initiate a cross contract call on the\n    //account we're giving access to. \n    if (msg != null) {\n        // Initiating receiver's call and the callback\n        const promise = near.promiseBatchCreate(accountId);\n        near.promiseBatchActionFunctionCall(\n            promise, \n            \"nft_on_approve\", \n            bytes(JSON.stringify({ \n                token_id: tokenId,\n                owner_id: token.owner_id,\n                approval_id: approvalId,\n                msg\n            })), \n            0, // no deposit \n            GAS_FOR_NFT_ON_APPROVE\n        );\n\n        near.promiseReturn(promise);\n    }\n}\n\n//check if the passed in account has access to approve the token ID\nexport function internalNftIsApproved({\n    contract,\n    tokenId,\n    approvedAccountId,\n    approvalId\n}:{ \n    contract: Contract, \n    tokenId: string,\n    approvedAccountId: string, \n    approvalId: number \n}) {\n    //get the token object from the token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the approval number for the passed in account ID\n    let approval = token.approved_account_ids[approvedAccountId];\n\n    //if there was no approval ID found for the account ID, we simply return false\n    if (approval == null) {\n        return false\n    }\n\n    //if there was some approval ID found for the account ID\n    //if there was no approval_id passed into the function, we simply return true\n    if (approvalId == null) {\n        return true\n    }\n\n    //if a specific approval_id was passed into the function\n    //return if the approval ID passed in matches the actual approval ID for the account\n    return approvalId == approval;\n}\n\n//revoke a specific account from transferring the token on your behalf\nexport function internalNftRevoke({\n    contract,\n    tokenId,\n    accountId\n}:{ \n    contract: Contract, \n    tokenId: string, \n    accountId: string \n}) {\n    //assert that the user attached exactly 1 yoctoNEAR for security reasons\n    assertOneYocto();\n\n    //get the token object using the passed in token_id\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller of the function and assert that they are the owner of the token\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n     \n    //if the account ID was in the token's approval, we remove it\n    if (token.approved_account_ids.hasOwnProperty(accountId)) {\n        delete token.approved_account_ids[accountId];\n        \n        //refund the funds released by removing the approved_account_id to the caller of the function\n        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);\n        \n        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list\n        contract.tokensById.set(tokenId, token);\n    }\n}\n\n//revoke all accounts from transferring the token on your behalf\nexport function internalNftRevokeAll({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    //assert that the caller attached exactly 1 yoctoNEAR for security\n    assertOneYocto();\n\n    //get the token object from the passed in token ID\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token\");\n    }\n\n    //get the caller and make sure they are the owner of the tokens\n    let predecessorAccountId = near.predecessorAccountId();\n    assert(predecessorAccountId == token.owner_id, \"only token owner can revoke\");\n\n    //only revoke if the approved account IDs for the token is not empty\n    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {\n        //refund the approved account IDs to the caller of the function\n        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);\n        //clear the approved account IDs\n        token.approved_account_ids = {};\n        //insert the token back into the tokens_by_id collection with the approved account IDs cleared\n        contract.tokensById.set(tokenId, token);\n    }\n}","import {\n    NearBindgen,\n    call,\n    view,\n    LookupMap,\n    UnorderedMap,\n    initialize,\n    near,\n} from \"near-sdk-js\";\nimport {\n    NFTContractMetadata,\n    Token,\n    TokenMetadata,\n    internalNftMetadata,\n} from \"./metadata\";\nimport { internalMint } from \"./mint\";\nimport {\n    internalNftTokens,\n    internalSupplyForOwner,\n    internalTokensForOwner,\n    internalTotalSupply,\n} from \"./enumeration\";\nimport {\n    internalNftToken,\n    internalNftTransfer,\n    internalNftTransferCall,\n    internalResolveTransfer,\n} from \"./nft_core\";\nimport {\n    internalNftApprove,\n    internalNftIsApproved,\n    internalNftRevoke,\n    internalNftRevokeAll,\n} from \"./approval\";\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen({})\nexport class Contract {\n    owner_id: string;\n    tokensPerOwner: LookupMap = new LookupMap(\"tokensPerOwner\");\n    tokensById: LookupMap = new LookupMap(\"tokensById\");\n    tokenMetadataById: UnorderedMap = new UnorderedMap(\"tokenMetadataById\");\n    metadata: NFTContractMetadata;\n\n    @initialize({})\n    init({\n        owner_id,\n        metadata = {\n            spec: \"nft-1.0.0\",\n            name: \"NFT Tutorial Contract\",\n            symbol: \"GOTEAM\",\n        },\n    }: {\n        owner_id: string;\n        metadata: { spec: string; name: string; symbol: string };\n    }) {\n        this.owner_id = owner_id;\n        this.metadata = metadata;\n    }\n\n    /*\n        MINT\n    */\n    @call({ payableFunction: true })\n    nft_mint({ token_id, metadata, receiver_id }) {\n        let tokenId = internalMint({\n            contract: this,\n            tokenId: token_id,\n            metadata: metadata,\n            receiver_id: receiver_id,\n        });\n        near.log(`TokenId: ${token_id}`);\n        return token_id;\n    }\n\n    /*\n        CORE\n    */\n    @view({})\n    //get the information for a specific token ID\n    nft_token({ token_id }) {\n        return internalNftToken({ contract: this, tokenId: token_id });\n    }\n\n    @call({})\n    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver.\n    nft_transfer({ receiver_id, token_id, approval_id, memo }) {\n        return internalNftTransfer({\n            contract: this,\n            receiverId: receiver_id,\n            tokenId: token_id,\n            approvalId: approval_id,\n            memo: memo,\n        });\n    }\n\n    @call({})\n    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract\n    nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {\n        return internalNftTransferCall({\n            contract: this,\n            receiverId: receiver_id,\n            tokenId: token_id,\n            approvalId: approval_id,\n            memo: memo,\n            msg: msg,\n        });\n    }\n\n    @call({})\n    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method\n    //returns true if the token was successfully transferred to the receiver_id\n    nft_resolve_transfer({\n        authorized_id,\n        owner_id,\n        receiver_id,\n        token_id,\n        approved_account_ids,\n        memo,\n    }) {\n        return internalResolveTransfer({\n            contract: this,\n            authorizedId: authorized_id,\n            ownerId: owner_id,\n            receiverId: receiver_id,\n            tokenId: token_id,\n            approvedAccountIds: approved_account_ids,\n            memo: memo,\n        });\n    }\n\n    /*\n        APPROVALS\n    */\n    @view({})\n    //check if the passed in account has access to approve the token ID\n    nft_is_approved({ token_id, approved_account_id, approval_id }) {\n        return internalNftIsApproved({\n            contract: this,\n            tokenId: token_id,\n            approvedAccountId: approved_account_id,\n            approvalId: approval_id,\n        });\n    }\n\n    @call({})\n    //approve an account ID to transfer a token on your behalf\n    nft_approve({ token_id, account_id, msg }) {\n        return internalNftApprove({\n            contract: this,\n            tokenId: token_id,\n            accountId: account_id,\n            msg: msg,\n        });\n    }\n\n    @call({})\n    //approve an account ID to transfer a token on your behalf\n    nft_revoke({ token_id, account_id }) {\n        return internalNftRevoke({\n            contract: this,\n            tokenId: token_id,\n            accountId: account_id,\n        });\n    }\n\n    @call({})\n    //approve an account ID to transfer a token on your behalf\n    nft_revoke_all({ token_id }) {\n        return internalNftRevokeAll({ contract: this, tokenId: token_id });\n    }\n\n    /*\n        ENUMERATION\n    */\n    @view({})\n    //Query for the total supply of NFTs on the contract\n    nft_total_supply() {\n        return internalTotalSupply({ contract: this });\n    }\n\n    @view({})\n    //Query for nft tokens on the contract regardless of the owner using pagination\n    nft_tokens({ from_index, limit }) {\n        return internalNftTokens({\n            contract: this,\n            fromIndex: from_index,\n            limit: limit,\n        });\n    }\n\n    @view({})\n    //get the total supply of NFTs for a given owner\n    nft_tokens_for_owner({ account_id, from_index, limit }) {\n        return internalTokensForOwner({\n            contract: this,\n            accountId: account_id,\n            fromIndex: from_index,\n            limit: limit,\n        });\n    }\n\n    @view({})\n    //Query for all the tokens for an owner\n    nft_supply_for_owner({ account_id }) {\n        return internalSupplyForOwner({\n            contract: this,\n            account_id: account_id,\n        });\n    }\n\n    /*\n        METADATA\n    */\n    @view({})\n    //Query for all the tokens for an owner\n    nft_metadata() {\n        return internalNftMetadata({ contract: this });\n    }\n}\n"],"names":["PromiseResult","PromiseError","u8ArrayToBytes","array","ret","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","Error","str","assert","b","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","c","encode","Array","from","reverse","reduce","acc","undefined","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","radix2","revPadding","unsafeWrapper","apply","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","Object","keys","CurveType","U64_MAX","EVICTED_REGISTER","log","params","env","x","JSON","stringify","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","panicUtf8","msg","panic_utf8","storageRead","key","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","storageUsage","storage_usage","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","initialize","target","descriptor","call","privateFunction","payableFunction","originalMethod","near","BigInt","view","NearBindgen","requireInit","_create","_getState","rawState","_deserialize","_saveToStorage","obj","_serialize","_getArgs","parse","_reconstruct","classObject","plainObject","item","constructor","deserialize","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","serialize","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","clear","toArray","vector","current","next","UnorderedMap","values","keysLen","keysIsEmpty","valueAndIndex","oldValue","nextIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","kvs","k","unorderedMap","serializeIndex","deserializeIndex","rawIndex","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","indexLookup","nextIndexRaw","indexRaw","lastElement","lastLookupElement","Token","owner_id","approvedAccountIds","nextApprovalId","royalty","approved_account_ids","next_approval_id","JsonToken","tokenId","ownerId","metadata","token_id","internalNftMetadata","contract","restoreOwners","collection","refundApprovedAccountIdsIter","storageReleased","bytesForApprovedAccountId","partialSum","amountToTransfer","valueOf","promise","refundApprovedAccountIds","refundDeposit","storageUsed","requiredCost","refund","assertAtLeastOneYocto","assertOneYocto","toString","internalAddTokenToOwner","tokenSet","tokensPerOwner","internalRemoveTokenFromOwner","internalTransfer","senderId","receiverId","approvalId","memo","token","tokensById","hasOwnProperty","actualApprovalId","newToken","authorizedId","nftTransferLog","standard","NFT_STANDARD_NAME","version","NFT_METADATA_SPEC","event","authorized_id","old_owner_id","new_owner_id","token_ids","internalMint","receiver_id","initialStorageUsage","tokenMetadataById","nftMintLog","requiredStorageInBytes","GAS_FOR_RESOLVE_TRANSFER","GAS_FOR_NFT_ON_TRANSFER","internalNftToken","jsonToken","internalNftTransfer","previousToken","internalNftTransferCall","sender_id","previous_owner_id","internalResolveTransfer","result","internalTotalSupply","internalNftTokens","fromIndex","tokens","start","parseInt","max","internalSupplyForOwner","account_id","internalTokensForOwner","GAS_FOR_NFT_ON_APPROVE","internalNftApprove","isNewApproval","approval_id","internalNftIsApproved","approvedAccountId","approval","internalNftRevoke","internalNftRevokeAll","getPrototypeOf","prototype","Contract","init","spec","name","symbol","nft_mint","nft_token","nft_transfer","nft_transfer_call","nft_resolve_transfer","nft_is_approved","approved_account_id","nft_approve","nft_revoke","nft_revoke_all","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","nft_supply_for_owner","nft_metadata"],"mappings":"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"}